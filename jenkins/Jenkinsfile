pipeline {
    agent {
        docker {
            image 'ilyes94/maven-docker-java17'
            args '-v /root/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock'  
            reuseNode true
        }
    }

    triggers {
        cron 'H/30 * * * *'  
    }

    environment {
        DOCKER_CONFIG = '/tmp/.docker'
        PROJECT_NAME = sh(script: 'mvn -q -DforceStdout help:evaluate -Dexpression=project.name', returnStdout: true).trim()
        PROJECT_VERSION = sh(script: 'mvn -q -DforceStdout help:evaluate -Dexpression=project.version', returnStdout: true).trim()
        SONAR_HOST_URL = 'http://host.docker.internal:9000'
    }

    stages {
        stage('Build') {
            steps {
                sh 'docker info'  
                sh 'mvn -B -DskipTests clean package'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: 'target/**/*.jar', fingerprint: true
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_TOKEN = credentials('sonar-token')
            }
            steps {
                sh """
                    mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=${env.PROJECT_NAME} \
                    -Dsonar.projectName=${env.PROJECT_NAME} \
                    -Dsonar.host.url=${env.SONAR_HOST_URL} \
                    -Dsonar.token=${env.SONAR_TOKEN} \
                    -Dsonar.java.binaries=target/classes
                """
            }
        }

        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }

        stage('Docker Build & Push') {
            environment {
                DOCKERHUB_CREDENTIALS = credentials('dockerhub')
            }
            steps {
                script {
                    sh """
                        echo ${env.DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${env.DOCKERHUB_CREDENTIALS_USR} --password-stdin
                        docker build -t ${env.PROJECT_NAME}:${env.PROJECT_VERSION} -f Dockerfile .
                        docker tag ${env.PROJECT_NAME}:${env.PROJECT_VERSION} ${env.DOCKERHUB_CREDENTIALS_USR}/${env.PROJECT_NAME}:${env.PROJECT_VERSION}
                        docker push ${env.DOCKERHUB_CREDENTIALS_USR}/${env.PROJECT_NAME}:${env.PROJECT_VERSION}
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh "docker run -d --name ${env.PROJECT_NAME}-${env.PROJECT_VERSION}-$BUILD_NUMBER ${env.DOCKERHUB_CREDENTIALS_USR}/${env.PROJECT_NAME}:${env.PROJECT_VERSION}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                // Cleanup dangling containers and images
                sh 'docker system prune -f || true'
            }
        }
        success {
            slackSend(color: 'good', message: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            slackSend(color: 'danger', message: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}
