pipeline {
    agent {
        docker {
            image 'ilyes94/maven-docker-java17'
            args '-v /root/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    triggers {
        cron 'H/30 * * * *'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        DOCKER_CONFIG = '/tmp/.docker'
        PROJECT_NAME = sh(script: 'mvn -q -DforceStdout help:evaluate -Dexpression=project.name', returnStdout: true).trim()
        PROJECT_VERSION = sh(script: 'mvn -q -DforceStdout help:evaluate -Dexpression=project.version', returnStdout: true).trim()
    }

    stages {
        stage('Build') {
            steps {
                sh 'docker info'
                sh 'mvn -B -DskipTests clean package'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

       stage('SonarQube Analysis') {
    steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
            sh """
                mvn clean verify sonar:sonar \
  -Dsonar.projectKey=second-testt \
  -Dsonar.projectName='second-test' \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.token=sqp_e7465a670fa205090599c4d1cb418b37df5fa34f
            """
        }
    }
}

        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }

        stage('Docker Build') {
            steps {
                sh "docker build -t ${PROJECT_NAME}:${PROJECT_VERSION} -f Dockerfile ."
            }
        }

        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                    sh '''
                        echo "$dockerHubPassword" | docker login -u "$dockerHubUser" --password-stdin
                        docker tag ${PROJECT_NAME}:${PROJECT_VERSION} ${dockerHubUser}/${PROJECT_NAME}:${PROJECT_VERSION}
                        docker push ${dockerHubUser}/${PROJECT_NAME}:${PROJECT_VERSION}
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                    sh "docker run -d --name ${PROJECT_NAME}-${PROJECT_VERSION}-$BUILD_NUMBER ${dockerHubUser}/${PROJECT_NAME}:${PROJECT_VERSION}"
                }
            }
        }
    }
}
