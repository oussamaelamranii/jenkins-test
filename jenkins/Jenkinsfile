pipeline {
    agent {
        docker {
            image 'maven:3.8.6-openjdk-17'  // Image officielle
            args '-v $HOME/.m2:/root/.m2'    // Correct mount path
        }
    }

    triggers {
        cron 'H/30 * * * *'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerHub')
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=ajava-maven-project \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.token=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('Docker Operations') {
            agent any  // Exécute sur l'hôte Jenkins (accès direct à Docker)
            steps {
                script {
                    def name = sh(script: 'mvn -q -DforceStdout help:evaluate -Dexpression=project.name', returnStdout: true).trim()
                    def version = sh(script: 'mvn -q -DforceStdout help:evaluate -Dexpression=project.version', returnStdout: true).trim()
                    
                    withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                        sh """
                            docker build -t ${name}:${version} .
                            echo ${dockerHubPassword} | docker login -u ${dockerHubUser} --password-stdin
                            docker tag ${name}:${version} ${dockerHubUser}/${name}:${version}
                            docker push ${dockerHubUser}/${name}:${version}
                            docker run -d --name ${name}-${version} ${dockerHubUser}/${name}:${version}
                        """
                    }
                }
            }
        }
    }
}
